#!/bin/bash

echo "Do you want to have everything run automatically? (Yes/No)"
read master_answer

# Change hostname
echo "Before we begin, do you want to change your hostname? (Y/N)"
read download_package
if [[ ${download_package,,} == "y" ]]; then
    echo "Please enter your desired hostname:"
    read desired_hostname
    echo "Changing hostname to $desired_hostname"
    sudo hostnamectl set-hostname "$desired_hostname"
fi

if [[ ${master_answer,,} = "yes" ]]; then
    auto_confirm=true
    echo "starting automatic setup"
elif [[ ${master_answer,,} = "no" ]]; then
    echo "starting manual setup"
    auto_confirm=false
fi

# edits dnf config file for parallel downloads
if [[ ${master_answer,,} = "yes" ]]; then
    echo "Configuring DNF parallel downloads"
    sudo cp /etc/dnf/dnf.conf /etc/dnf/dnf.conf.bak
    sudo sed -i '/max_parallel_downloads/c\max_parallel_downloads=10' /etc/dnf/dnf.conf
elif [[ ${master_answer,,} = "no" ]]; then
    echo "Would you like to configure DNF parallel downloads? (Y/N)"
    read download_answer
    if [[ ${download_answer,,} = "y" || $download_answer = "" ]]; then
        echo "Configuring DNF parallel downloads"
        sudo cp /etc/dnf/dnf.conf /etc/dnf/dnf.conf.bak
        sudo sed -i '/max_parallel_downloads/c\max_parallel_downloads=10' /etc/dnf/dnf.conf
    elif [[ ${download_answer,,} = "n" ]]; then
        echo "Download cancelled"
    else
        echo "Invalid input. Please enter a valid input"
    fi
fi

# List of packages
packages=("neofetch" "gnome-tweaks" "gnome-extensions-app" "gnome-shell-extension-dash-to-dock" "nano" "discord" "edge" "--repofrompath 'terra,https://repos.fyralabs.com/terra$releasever' --setopt='terra.gpgkey=https://repos.fyralabs.com/terra$releasever/key.asc' terra-release" "git" "gimp" "thunderbird" "vlc" "vscode")

# downloads all the packages
for package in "${packages[@]}"
do 
    if [[ ${master_answer,,} = "no" ]]; then
        echo "Do you want to download $package? (Y/N)"
        read download_package
        if [[ ${download_package,,} == "n" ]]; then
            echo "Skipping $package"
            continue
        fi
    fi
    echo "Downloading $package..."
    sudo dnf install -y $package
done

if [[ ${master_answer,,} = "no" ]]; then
    echo "Do you want to install the RPM Fusion Repository? (Y/N)"
    read download_package
    if [[ ${download_package,,} != "n" ]]; then
        echo "Downloading RPM Fusion Repository"

        #enabling RPM Fusion Repository
        echo "Enabling RPM Fusion Repository"
        sudo dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
        sudo dnf install -y https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm

        echo "All packages downloaded successfully"
    else
        echo "Skipping the RPM Fusion Repository"
    fi
fi

# upgrades packages. Opera needs packages updated before installing

if [[ ${master_answer,,} = "no" ]]; then
    echo "Do you want to update all packages (note - reccomended for Opera install)? (Y/N)"
    read download_package
    if [[ ${download_package,,} != "n" ]]; then
        echo "Upgrading packages"
		
echo "Upgrading all packages"
sudo dnf upgrade -y
 echo "All packages upgraded successfully"
fi

if [[ ${master_answer,,} = "no" ]]; then
    echo "Do you want to install and configure Opera? (Y/N)"
    read download_package
    if [[ ${download_package,,} != "n" ]]; then
        echo "Installing Opera"

sudo dnf install -y dnf-plugins-core
echo "configuring Opera"
sudo dnf config-manager --add-repo https://rpm.opera.com/rpm
sudo rpm --import https://rpm.opera.com/rpm/opera-gpg-key.pub
sudo dnf install -y opera-stable
echo "Opera successfully installed"
fi

if [[ ${master_answer,,} = "no" ]]; then
    echo "Do you want to install Multimedia Codecs? (Y/N)"
    read download_package
    if [[ ${download_package,,} != "n" ]]; then
        echo "Installing Multimedia Codecs"

# Multimedia codecs
echo "Installing multimedia codecs"
sudo dnf install -y gstreamer1-plugins-{bad-\*,good-\*,base} gstreamer1-plugin-openh264 gstreamer1-libav --exclude=gstreamer1-plugins-bad-free-devel
sudo dnf install -y lame\* --exclude=lame-devel
echo "Upgrading multimedia codecs"
sudo dnf group upgrade --with-optional Multimedia
echo "Multimedia Codecs successfully installed"
fi

# Adds minimize and maximize buttons
if [[ ${master_answer,,} = "no" ]]; then
    echo "Would you like to add the minimize/maximize buttons onto your winodws? (Y/N)"
    read download_package
    if [[ ${download_package,,} != "n" ]]; then
	echo "Adding minimize, maximize, and close buttons"
gsettings set org.gnome.desktop.wm.preferences button-layout 'appmenu:minimize,maximize,close'
echo "adding dock"
gnome-extensions enable dash-to-dock@micxgx.gmail.com
echo "Minimize and maximize buttons added"
fi

# turns night light on
if [[ ${master_answer,,} = "no" ]]; then
    echo "Would you like to turn on night light (night shift)? (Y/N)"
    read download_package
    if [[ ${download_package,,} != "n" ]]; then
	echo "turning on night light"
gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true
fi

# turns auto reporting off
if [[ ${master_answer,,} = "no" ]]; then
    echo "Would you like to turn off automatic reporting?(Y/N)"
    read download_package
    if [[ ${download_package,,} != "n" ]]; then
	echo "disabling automatic reporting"
sudo systemctl stop abrt-journal-core.service
sudo systemctl disable abrt-journal-core.service

sudo systemctl stop abrt-oops.service
sudo systemctl disable abrt-oops.service

sudo systemctl stop abrt-xorg.service
sudo systemctl disable abrt-xorg.service

sudo systemctl stop abrtd.service
sudo systemctl disable abrtd.service
echo "Automatic reporting disabled"
fi

# Reboots to set in changes
if [[ ${master_answer,,} = "no" ]]; then
    echo "Would you like to reboot to apply/view changes?(Y/N)"
    read download_package
    if [[ ${download_package,,} != "n" ]]; then
	echo "Rebooting"
reboot
